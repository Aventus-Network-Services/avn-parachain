// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_nft_manager
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-10-13, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ip-172-31-5-132`, CPU: `AMD EPYC 7R32`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./avn-parachain-collator
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --template
// frame-weight-template.hbs
// --pallet
// pallet_nft_manager
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// nft-manager_weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_nft_manager.
pub trait WeightInfo {
	fn mint_single_nft(r: u32, ) -> Weight;
	fn signed_mint_single_nft(r: u32, ) -> Weight;
	fn list_nft_open_for_sale() -> Weight;
	fn signed_list_nft_open_for_sale() -> Weight;
	fn signed_transfer_fiat_nft() -> Weight;
	fn signed_cancel_list_fiat_nft() -> Weight;
	fn proxy_signed_mint_single_nft(r: u32, ) -> Weight;
	fn proxy_signed_list_nft_open_for_sale() -> Weight;
	fn proxy_signed_transfer_fiat_nft() -> Weight;
	fn proxy_signed_cancel_list_fiat_nft() -> Weight;
	fn proxy_signed_create_batch(r: u32, ) -> Weight;
	fn proxy_signed_mint_batch_nft() -> Weight;
	fn proxy_signed_list_batch_for_sale() -> Weight;
	fn proxy_signed_end_batch_sale() -> Weight;
}

/// Weights for pallet_nft_manager using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: NftManager UsedExternalReferences (r:1 w:1)
	// Storage: NftManager NextSingleNftUniqueId (r:1 w:1)
	// Storage: NftManager Nfts (r:1 w:1)
	// Storage: NftManager NextInfoId (r:1 w:1)
	// Storage: NftManager OwnedNfts (r:1 w:1)
	// Storage: NftManager NftInfos (r:0 w:1)
	/// The range of component `r` is `[1, 5]`.
	fn mint_single_nft(r: u32, ) -> Weight {
		(40_841_000 as Weight)
			// Standard Error: 59_000
			.saturating_add((112_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	// Storage: NftManager UsedExternalReferences (r:1 w:1)
	// Storage: NftManager NextSingleNftUniqueId (r:1 w:1)
	// Storage: NftManager Nfts (r:1 w:1)
	// Storage: NftManager NextInfoId (r:1 w:1)
	// Storage: NftManager OwnedNfts (r:1 w:1)
	// Storage: NftManager NftInfos (r:0 w:1)
	/// The range of component `r` is `[1, 5]`.
	fn signed_mint_single_nft(r: u32, ) -> Weight {
		(117_538_000 as Weight)
			// Standard Error: 95_000
			.saturating_add((234_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	// Storage: NftManager Nfts (r:1 w:1)
	// Storage: NftManager NftOpenForSale (r:1 w:1)
	fn list_nft_open_for_sale() -> Weight {
		(26_381_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: NftManager Nfts (r:1 w:1)
	// Storage: NftManager NftOpenForSale (r:1 w:1)
	fn signed_list_nft_open_for_sale() -> Weight {
		(104_402_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: NftManager NftOpenForSale (r:1 w:1)
	// Storage: NftManager Nfts (r:1 w:1)
	// Storage: NftManager OwnedNfts (r:2 w:2)
	fn signed_transfer_fiat_nft() -> Weight {
		(119_443_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: NftManager NftOpenForSale (r:1 w:1)
	// Storage: NftManager Nfts (r:1 w:1)
	fn signed_cancel_list_fiat_nft() -> Weight {
		(111_092_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: NftManager UsedExternalReferences (r:1 w:1)
	// Storage: NftManager NextSingleNftUniqueId (r:1 w:1)
	// Storage: NftManager Nfts (r:1 w:1)
	// Storage: NftManager NextInfoId (r:1 w:1)
	// Storage: NftManager OwnedNfts (r:1 w:1)
	// Storage: NftManager NftInfos (r:0 w:1)
	/// The range of component `r` is `[1, 5]`.
	fn proxy_signed_mint_single_nft(r: u32, ) -> Weight {
		(126_990_000 as Weight)
			// Standard Error: 140_000
			.saturating_add((280_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	// Storage: NftManager Nfts (r:1 w:1)
	// Storage: NftManager NftOpenForSale (r:1 w:1)
	fn proxy_signed_list_nft_open_for_sale() -> Weight {
		(113_153_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: NftManager NftOpenForSale (r:1 w:1)
	// Storage: NftManager Nfts (r:1 w:1)
	// Storage: NftManager OwnedNfts (r:2 w:2)
	fn proxy_signed_transfer_fiat_nft() -> Weight {
		(128_803_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: NftManager NftOpenForSale (r:1 w:1)
	// Storage: NftManager Nfts (r:1 w:1)
	fn proxy_signed_cancel_list_fiat_nft() -> Weight {
		(119_463_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: NftManager BatchNonces (r:1 w:1)
	// Storage: NftManager NextSingleNftUniqueId (r:1 w:1)
	// Storage: NftManager BatchInfoId (r:1 w:1)
	// Storage: NftManager NextInfoId (r:1 w:1)
	// Storage: NftManager NftInfos (r:0 w:1)
	/// The range of component `r` is `[1, 5]`.
	fn proxy_signed_create_batch(r: u32, ) -> Weight {
		(120_624_000 as Weight)
			// Standard Error: 131_000
			.saturating_add((390_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	// Storage: NftManager BatchInfoId (r:1 w:0)
	// Storage: NftManager BatchOpenForSale (r:1 w:0)
	// Storage: NftManager NftInfos (r:1 w:0)
	// Storage: NftManager NftBatches (r:1 w:1)
	// Storage: NftManager UsedExternalReferences (r:1 w:1)
	// Storage: NftManager Nfts (r:1 w:1)
	// Storage: NftManager OwnedNfts (r:1 w:1)
	fn proxy_signed_mint_batch_nft() -> Weight {
		(149_354_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: NftManager BatchInfoId (r:1 w:0)
	// Storage: NftManager BatchNonces (r:1 w:1)
	// Storage: NftManager NftInfos (r:1 w:0)
	// Storage: NftManager NftBatches (r:1 w:0)
	// Storage: NftManager BatchOpenForSale (r:1 w:1)
	fn proxy_signed_list_batch_for_sale() -> Weight {
		(124_563_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: NftManager BatchInfoId (r:1 w:0)
	// Storage: NftManager BatchOpenForSale (r:1 w:1)
	// Storage: NftManager BatchNonces (r:1 w:1)
	// Storage: NftManager NftInfos (r:1 w:0)
	fn proxy_signed_end_batch_sale() -> Weight {
		(127_652_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: NftManager UsedExternalReferences (r:1 w:1)
	// Storage: NftManager NextSingleNftUniqueId (r:1 w:1)
	// Storage: NftManager Nfts (r:1 w:1)
	// Storage: NftManager NextInfoId (r:1 w:1)
	// Storage: NftManager OwnedNfts (r:1 w:1)
	// Storage: NftManager NftInfos (r:0 w:1)
	/// The range of component `r` is `[1, 5]`.
	fn mint_single_nft(r: u32, ) -> Weight {
		(40_841_000 as Weight)
			// Standard Error: 59_000
			.saturating_add((112_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	// Storage: NftManager UsedExternalReferences (r:1 w:1)
	// Storage: NftManager NextSingleNftUniqueId (r:1 w:1)
	// Storage: NftManager Nfts (r:1 w:1)
	// Storage: NftManager NextInfoId (r:1 w:1)
	// Storage: NftManager OwnedNfts (r:1 w:1)
	// Storage: NftManager NftInfos (r:0 w:1)
	/// The range of component `r` is `[1, 5]`.
	fn signed_mint_single_nft(r: u32, ) -> Weight {
		(117_538_000 as Weight)
			// Standard Error: 95_000
			.saturating_add((234_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	// Storage: NftManager Nfts (r:1 w:1)
	// Storage: NftManager NftOpenForSale (r:1 w:1)
	fn list_nft_open_for_sale() -> Weight {
		(26_381_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: NftManager Nfts (r:1 w:1)
	// Storage: NftManager NftOpenForSale (r:1 w:1)
	fn signed_list_nft_open_for_sale() -> Weight {
		(104_402_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: NftManager NftOpenForSale (r:1 w:1)
	// Storage: NftManager Nfts (r:1 w:1)
	// Storage: NftManager OwnedNfts (r:2 w:2)
	fn signed_transfer_fiat_nft() -> Weight {
		(119_443_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	// Storage: NftManager NftOpenForSale (r:1 w:1)
	// Storage: NftManager Nfts (r:1 w:1)
	fn signed_cancel_list_fiat_nft() -> Weight {
		(111_092_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: NftManager UsedExternalReferences (r:1 w:1)
	// Storage: NftManager NextSingleNftUniqueId (r:1 w:1)
	// Storage: NftManager Nfts (r:1 w:1)
	// Storage: NftManager NextInfoId (r:1 w:1)
	// Storage: NftManager OwnedNfts (r:1 w:1)
	// Storage: NftManager NftInfos (r:0 w:1)
	/// The range of component `r` is `[1, 5]`.
	fn proxy_signed_mint_single_nft(r: u32, ) -> Weight {
		(126_990_000 as Weight)
			// Standard Error: 140_000
			.saturating_add((280_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	// Storage: NftManager Nfts (r:1 w:1)
	// Storage: NftManager NftOpenForSale (r:1 w:1)
	fn proxy_signed_list_nft_open_for_sale() -> Weight {
		(113_153_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: NftManager NftOpenForSale (r:1 w:1)
	// Storage: NftManager Nfts (r:1 w:1)
	// Storage: NftManager OwnedNfts (r:2 w:2)
	fn proxy_signed_transfer_fiat_nft() -> Weight {
		(128_803_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	// Storage: NftManager NftOpenForSale (r:1 w:1)
	// Storage: NftManager Nfts (r:1 w:1)
	fn proxy_signed_cancel_list_fiat_nft() -> Weight {
		(119_463_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: NftManager BatchNonces (r:1 w:1)
	// Storage: NftManager NextSingleNftUniqueId (r:1 w:1)
	// Storage: NftManager BatchInfoId (r:1 w:1)
	// Storage: NftManager NextInfoId (r:1 w:1)
	// Storage: NftManager NftInfos (r:0 w:1)
	/// The range of component `r` is `[1, 5]`.
	fn proxy_signed_create_batch(r: u32, ) -> Weight {
		(120_624_000 as Weight)
			// Standard Error: 131_000
			.saturating_add((390_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
	// Storage: NftManager BatchInfoId (r:1 w:0)
	// Storage: NftManager BatchOpenForSale (r:1 w:0)
	// Storage: NftManager NftInfos (r:1 w:0)
	// Storage: NftManager NftBatches (r:1 w:1)
	// Storage: NftManager UsedExternalReferences (r:1 w:1)
	// Storage: NftManager Nfts (r:1 w:1)
	// Storage: NftManager OwnedNfts (r:1 w:1)
	fn proxy_signed_mint_batch_nft() -> Weight {
		(149_354_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	// Storage: NftManager BatchInfoId (r:1 w:0)
	// Storage: NftManager BatchNonces (r:1 w:1)
	// Storage: NftManager NftInfos (r:1 w:0)
	// Storage: NftManager NftBatches (r:1 w:0)
	// Storage: NftManager BatchOpenForSale (r:1 w:1)
	fn proxy_signed_list_batch_for_sale() -> Weight {
		(124_563_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: NftManager BatchInfoId (r:1 w:0)
	// Storage: NftManager BatchOpenForSale (r:1 w:1)
	// Storage: NftManager BatchNonces (r:1 w:1)
	// Storage: NftManager NftInfos (r:1 w:0)
	fn proxy_signed_end_batch_sale() -> Weight {
		(127_652_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
}