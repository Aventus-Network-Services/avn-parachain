// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_parachain_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-12-06, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `nahu-XPS-8930`, CPU: `Intel(R) Core(TM) i7-8700 CPU @ 3.20GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/avn-parachain-collator
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --template
// .maintain/frame-weight-template.hbs
// --pallet
// pallet_parachain_staking
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// benchmark_weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_parachain_staking.
pub trait WeightInfo {
	fn set_total_selected() -> Weight;
	fn set_blocks_per_era() -> Weight;
	fn join_candidates(x: u32, ) -> Weight;
	fn schedule_leave_candidates(x: u32, ) -> Weight;
	fn execute_leave_candidates(x: u32, ) -> Weight;
	fn cancel_leave_candidates(x: u32, ) -> Weight;
	fn go_offline() -> Weight;
	fn go_online() -> Weight;
	fn candidate_bond_extra() -> Weight;
	fn signed_candidate_bond_extra() -> Weight;
	fn schedule_candidate_unbond() -> Weight;
	fn signed_schedule_candidate_unbond() -> Weight;
	fn execute_candidate_unbond() -> Weight;
	fn signed_execute_candidate_unbond() -> Weight;
	fn cancel_candidate_unbond() -> Weight;
	fn nominate(x: u32, y: u32, ) -> Weight;
	fn signed_nominate(x: u32, y: u32, ) -> Weight;
	fn schedule_leave_nominators() -> Weight;
	fn signed_schedule_leave_nominators() -> Weight;
	fn execute_leave_nominators(x: u32, ) -> Weight;
	fn signed_execute_leave_nominators(x: u32, ) -> Weight;
	fn cancel_leave_nominators() -> Weight;
	fn schedule_revoke_nomination() -> Weight;
	fn signed_schedule_revoke_nomination() -> Weight;
	fn bond_extra() -> Weight;
	fn signed_bond_extra() -> Weight;
	fn schedule_nominator_unbond() -> Weight;
	fn signed_schedule_nominator_unbond() -> Weight;
	fn execute_revoke_nomination() -> Weight;
	fn execute_nominator_unbond() -> Weight;
	fn signed_execute_nominator_unbond() -> Weight;
	fn cancel_revoke_nomination() -> Weight;
	fn cancel_nominator_unbond() -> Weight;
	fn era_transition_on_initialize(x: u32, y: u32, ) -> Weight;
	fn pay_one_collator_reward(y: u32, ) -> Weight;
	fn base_on_initialize() -> Weight;
	fn select_top_candidates() -> Weight;
	fn note_author() -> Weight;
	fn set_admin_setting() -> Weight;
}

/// Weights for pallet_parachain_staking using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: ParachainStaking TotalSelected (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	fn set_total_selected() -> Weight {
		(24_409_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: ParachainStaking Era (r:1 w:1)
	// Storage: ParachainStaking TotalSelected (r:1 w:0)
	fn set_blocks_per_era() -> Weight {
		(24_471_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking NominatorState (r:1 w:0)
	// Storage: ParachainStaking MinCollatorStake (r:1 w:0)
	// Storage: Session NextKeys (r:1 w:0)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Storage: ParachainStaking BottomNominations (r:0 w:1)
	// Storage: ParachainStaking TopNominations (r:0 w:1)
	/// The range of component `x` is `[3, 100]`.
	fn join_candidates(x: u32, ) -> Weight {
		(86_682_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((410_000 as Weight).saturating_mul(x as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Delay (r:1 w:0)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// The range of component `x` is `[3, 100]`.
	fn schedule_leave_candidates(x: u32, ) -> Weight {
		(53_040_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((278_000 as Weight).saturating_mul(x as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking TopNominations (r:1 w:1)
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: Balances Locks (r:2 w:2)
	// Storage: System Account (r:2 w:2)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking BottomNominations (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	/// The range of component `x` is `[2, 350]`.
	fn execute_leave_candidates(x: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 306_000
			.saturating_add((44_223_000 as Weight).saturating_mul(x as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((3 as Weight).saturating_mul(x as Weight)))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
			.saturating_add(T::DbWeight::get().writes((3 as Weight).saturating_mul(x as Weight)))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// The range of component `x` is `[3, 100]`.
	fn cancel_leave_candidates(x: u32, ) -> Weight {
		(38_373_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((790_000 as Weight).saturating_mul(x as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	fn go_offline() -> Weight {
		(36_953_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	fn go_online() -> Weight {
		(36_728_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	fn candidate_bond_extra() -> Weight {
		(175_749_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	// Storage: ParachainStaking ProxyNonces (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	fn signed_candidate_bond_extra() -> Weight {
		(125_100_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking MinCollatorStake (r:1 w:0)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Delay (r:1 w:0)
	fn schedule_candidate_unbond() -> Weight {
		(107_255_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: ParachainStaking ProxyNonces (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking MinCollatorStake (r:1 w:0)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Delay (r:1 w:0)
	fn signed_schedule_candidate_unbond() -> Weight {
		(102_782_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	fn execute_candidate_unbond() -> Weight {
		(62_458_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	// Storage: ParachainStaking ProxyNonces (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	fn signed_execute_candidate_unbond() -> Weight {
		(123_327_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	fn cancel_candidate_unbond() -> Weight {
		(25_507_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking TopNominations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	/// The range of component `x` is `[3, 100]`.
	/// The range of component `y` is `[2, 300]`.
	fn nominate(x: u32, y: u32, ) -> Weight {
		(111_435_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((290_000 as Weight).saturating_mul(x as Weight))
			// Standard Error: 3_000
			.saturating_add((101_000 as Weight).saturating_mul(y as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	// Storage: ParachainStaking ProxyNonces (r:1 w:1)
	// Storage: ParachainStaking MinTotalNominatorStake (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:3 w:2)
	// Storage: ParachainStaking TopNominations (r:2 w:2)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	/// The range of component `x` is `[3, 100]`.
	/// The range of component `y` is `[2, 300]`.
	fn signed_nominate(x: u32, _y: u32, ) -> Weight {
		(49_997_000 as Weight)
			// Standard Error: 188_000
			.saturating_add((60_201_000 as Weight).saturating_mul(x as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(x as Weight)))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(x as Weight)))
	}
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Delay (r:1 w:0)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	fn schedule_leave_nominators() -> Weight {
		(42_748_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: ParachainStaking ProxyNonces (r:1 w:1)
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Delay (r:1 w:0)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	fn signed_schedule_leave_nominators() -> Weight {
		(105_238_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking TopNominations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	/// The range of component `x` is `[2, 100]`.
	fn execute_leave_nominators(x: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 85_000
			.saturating_add((35_212_000 as Weight).saturating_mul(x as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().reads((3 as Weight).saturating_mul(x as Weight)))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			.saturating_add(T::DbWeight::get().writes((3 as Weight).saturating_mul(x as Weight)))
	}
	// Storage: ParachainStaking ProxyNonces (r:1 w:1)
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking TopNominations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	/// The range of component `x` is `[2, 100]`.
	fn signed_execute_leave_nominators(x: u32, ) -> Weight {
		(14_103_000 as Weight)
			// Standard Error: 73_000
			.saturating_add((35_166_000 as Weight).saturating_mul(x as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((3 as Weight).saturating_mul(x as Weight)))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			.saturating_add(T::DbWeight::get().writes((3 as Weight).saturating_mul(x as Weight)))
	}
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	fn cancel_leave_nominators() -> Weight {
		(40_687_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Delay (r:1 w:0)
	fn schedule_revoke_nomination() -> Weight {
		(43_483_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: ParachainStaking ProxyNonces (r:1 w:1)
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Delay (r:1 w:0)
	fn signed_schedule_revoke_nomination() -> Weight {
		(107_592_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:0)
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking TopNominations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	fn bond_extra() -> Weight {
		(82_632_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	// Storage: ParachainStaking ProxyNonces (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking TopNominations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	fn signed_bond_extra() -> Weight {
		(164_173_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(9 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking MinTotalNominatorStake (r:1 w:0)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Delay (r:1 w:0)
	fn schedule_nominator_unbond() -> Weight {
		(45_030_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: ParachainStaking ProxyNonces (r:1 w:1)
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking MinTotalNominatorStake (r:1 w:0)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Delay (r:1 w:0)
	fn signed_schedule_nominator_unbond() -> Weight {
		(121_216_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking TopNominations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	fn execute_revoke_nomination() -> Weight {
		(95_469_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(9 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking MinTotalNominatorStake (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking TopNominations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	fn execute_nominator_unbond() -> Weight {
		(85_777_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	// Storage: ParachainStaking ProxyNonces (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking MinTotalNominatorStake (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking TopNominations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	fn signed_execute_nominator_unbond() -> Weight {
		(154_733_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	fn cancel_revoke_nomination() -> Weight {
		(32_291_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	fn cancel_nominator_unbond() -> Weight {
		(38_392_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: ParachainStaking Era (r:1 w:1)
	// Storage: ParachainStaking Points (r:1 w:0)
	// Storage: ParachainStaking Staked (r:1 w:2)
	// Storage: System Account (r:302 w:302)
	// Storage: ParachainStaking LockedEraPayout (r:1 w:1)
	// Storage: ParachainStaking AwardedPts (r:9 w:1)
	// Storage: ParachainStaking GrowthPeriod (r:1 w:0)
	// Storage: ParachainStaking Growth (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:0)
	// Storage: ParachainStaking TotalSelected (r:1 w:0)
	// Storage: ParachainStaking MinCollatorStake (r:1 w:0)
	// Storage: ParachainStaking CandidateInfo (r:10 w:0)
	// Storage: ParachainStaking NominationScheduledRequests (r:10 w:0)
	// Storage: ParachainStaking TopNominations (r:10 w:0)
	// Storage: ParachainStaking Total (r:1 w:0)
	// Storage: ParachainStaking AtStake (r:1 w:11)
	// Storage: ParachainStaking SelectedCandidates (r:0 w:1)
	// Storage: ParachainStaking DelayedPayouts (r:0 w:1)
	/// The range of component `x` is `[8, 20]`.
	/// The range of component `y` is `[0, 30000]`.
	fn era_transition_on_initialize(x: u32, y: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 32_963_000
			.saturating_add((256_224_000 as Weight).saturating_mul(x as Weight))
			// Standard Error: 9_000
			.saturating_add((199_000 as Weight).saturating_mul(y as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((11 as Weight).saturating_mul(x as Weight)))
			.saturating_add(T::DbWeight::get().writes((8 as Weight).saturating_mul(x as Weight)))
	}
	// Storage: ParachainStaking DelayedPayouts (r:1 w:0)
	// Storage: ParachainStaking Points (r:1 w:0)
	// Storage: ParachainStaking AwardedPts (r:2 w:1)
	// Storage: ParachainStaking AtStake (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: ParachainStaking LockedEraPayout (r:1 w:1)
	/// The range of component `y` is `[0, 300]`.
	fn pay_one_collator_reward(y: u32, ) -> Weight {
		(110_819_000 as Weight)
			// Standard Error: 43_000
			.saturating_add((23_316_000 as Weight).saturating_mul(y as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(y as Weight)))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(y as Weight)))
	}
	// Storage: ParachainStaking Era (r:1 w:0)
	fn base_on_initialize() -> Weight {
		(4_617_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:0)
	// Storage: ParachainStaking TotalSelected (r:1 w:0)
	// Storage: ParachainStaking MinCollatorStake (r:1 w:0)
	// Storage: ParachainStaking CandidateInfo (r:20 w:0)
	// Storage: ParachainStaking NominationScheduledRequests (r:20 w:0)
	// Storage: ParachainStaking TopNominations (r:20 w:0)
	// Storage: ParachainStaking SelectedCandidates (r:0 w:1)
	// Storage: ParachainStaking AtStake (r:0 w:20)
	fn select_top_candidates() -> Weight {
		(449_526_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(63 as Weight))
			.saturating_add(T::DbWeight::get().writes(21 as Weight))
	}
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking AwardedPts (r:1 w:1)
	// Storage: ParachainStaking Points (r:1 w:1)
	fn note_author() -> Weight {
		(13_775_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: ParachainStaking Delay (r:0 w:1)
	fn set_admin_setting() -> Weight {
		(17_873_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: ParachainStaking TotalSelected (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	fn set_total_selected() -> Weight {
		(24_409_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: ParachainStaking Era (r:1 w:1)
	// Storage: ParachainStaking TotalSelected (r:1 w:0)
	fn set_blocks_per_era() -> Weight {
		(24_471_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking NominatorState (r:1 w:0)
	// Storage: ParachainStaking MinCollatorStake (r:1 w:0)
	// Storage: Session NextKeys (r:1 w:0)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Storage: ParachainStaking BottomNominations (r:0 w:1)
	// Storage: ParachainStaking TopNominations (r:0 w:1)
	/// The range of component `x` is `[3, 100]`.
	fn join_candidates(x: u32, ) -> Weight {
		(86_682_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((410_000 as Weight).saturating_mul(x as Weight))
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Delay (r:1 w:0)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// The range of component `x` is `[3, 100]`.
	fn schedule_leave_candidates(x: u32, ) -> Weight {
		(53_040_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((278_000 as Weight).saturating_mul(x as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking TopNominations (r:1 w:1)
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: Balances Locks (r:2 w:2)
	// Storage: System Account (r:2 w:2)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking BottomNominations (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	/// The range of component `x` is `[2, 350]`.
	fn execute_leave_candidates(x: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 306_000
			.saturating_add((44_223_000 as Weight).saturating_mul(x as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((3 as Weight).saturating_mul(x as Weight)))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes((3 as Weight).saturating_mul(x as Weight)))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// The range of component `x` is `[3, 100]`.
	fn cancel_leave_candidates(x: u32, ) -> Weight {
		(38_373_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((790_000 as Weight).saturating_mul(x as Weight))
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	fn go_offline() -> Weight {
		(36_953_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	fn go_online() -> Weight {
		(36_728_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	fn candidate_bond_extra() -> Weight {
		(175_749_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
	// Storage: ParachainStaking ProxyNonces (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	fn signed_candidate_bond_extra() -> Weight {
		(125_100_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking MinCollatorStake (r:1 w:0)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Delay (r:1 w:0)
	fn schedule_candidate_unbond() -> Weight {
		(107_255_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: ParachainStaking ProxyNonces (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking MinCollatorStake (r:1 w:0)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Delay (r:1 w:0)
	fn signed_schedule_candidate_unbond() -> Weight {
		(102_782_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	fn execute_candidate_unbond() -> Weight {
		(62_458_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
	// Storage: ParachainStaking ProxyNonces (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	fn signed_execute_candidate_unbond() -> Weight {
		(123_327_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	fn cancel_candidate_unbond() -> Weight {
		(25_507_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking TopNominations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	/// The range of component `x` is `[3, 100]`.
	/// The range of component `y` is `[2, 300]`.
	fn nominate(x: u32, y: u32, ) -> Weight {
		(111_435_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((290_000 as Weight).saturating_mul(x as Weight))
			// Standard Error: 3_000
			.saturating_add((101_000 as Weight).saturating_mul(y as Weight))
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
	}
	// Storage: ParachainStaking ProxyNonces (r:1 w:1)
	// Storage: ParachainStaking MinTotalNominatorStake (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:3 w:2)
	// Storage: ParachainStaking TopNominations (r:2 w:2)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	/// The range of component `x` is `[3, 100]`.
	/// The range of component `y` is `[2, 300]`.
	fn signed_nominate(x: u32, _y: u32, ) -> Weight {
		(49_997_000 as Weight)
			// Standard Error: 188_000
			.saturating_add((60_201_000 as Weight).saturating_mul(x as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().reads((2 as Weight).saturating_mul(x as Weight)))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes((2 as Weight).saturating_mul(x as Weight)))
	}
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Delay (r:1 w:0)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	fn schedule_leave_nominators() -> Weight {
		(42_748_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: ParachainStaking ProxyNonces (r:1 w:1)
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Delay (r:1 w:0)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	fn signed_schedule_leave_nominators() -> Weight {
		(105_238_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking TopNominations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	/// The range of component `x` is `[2, 100]`.
	fn execute_leave_nominators(x: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 85_000
			.saturating_add((35_212_000 as Weight).saturating_mul(x as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().reads((3 as Weight).saturating_mul(x as Weight)))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes((3 as Weight).saturating_mul(x as Weight)))
	}
	// Storage: ParachainStaking ProxyNonces (r:1 w:1)
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking TopNominations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	/// The range of component `x` is `[2, 100]`.
	fn signed_execute_leave_nominators(x: u32, ) -> Weight {
		(14_103_000 as Weight)
			// Standard Error: 73_000
			.saturating_add((35_166_000 as Weight).saturating_mul(x as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((3 as Weight).saturating_mul(x as Weight)))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes((3 as Weight).saturating_mul(x as Weight)))
	}
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	fn cancel_leave_nominators() -> Weight {
		(40_687_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Delay (r:1 w:0)
	fn schedule_revoke_nomination() -> Weight {
		(43_483_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: ParachainStaking ProxyNonces (r:1 w:1)
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Delay (r:1 w:0)
	fn signed_schedule_revoke_nomination() -> Weight {
		(107_592_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:0)
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking TopNominations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	fn bond_extra() -> Weight {
		(82_632_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
	}
	// Storage: ParachainStaking ProxyNonces (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking TopNominations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	fn signed_bond_extra() -> Weight {
		(164_173_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(9 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking MinTotalNominatorStake (r:1 w:0)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Delay (r:1 w:0)
	fn schedule_nominator_unbond() -> Weight {
		(45_030_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: ParachainStaking ProxyNonces (r:1 w:1)
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking MinTotalNominatorStake (r:1 w:0)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking Delay (r:1 w:0)
	fn signed_schedule_nominator_unbond() -> Weight {
		(121_216_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking TopNominations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	fn execute_revoke_nomination() -> Weight {
		(95_469_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(9 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking MinTotalNominatorStake (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking TopNominations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	fn execute_nominator_unbond() -> Weight {
		(85_777_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(10 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	// Storage: ParachainStaking ProxyNonces (r:1 w:1)
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	// Storage: ParachainStaking MinTotalNominatorStake (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ParachainStaking TopNominations (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:1)
	// Storage: ParachainStaking Total (r:1 w:1)
	fn signed_execute_nominator_unbond() -> Weight {
		(154_733_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().writes(9 as Weight))
	}
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	fn cancel_revoke_nomination() -> Weight {
		(32_291_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: ParachainStaking NominatorState (r:1 w:1)
	// Storage: ParachainStaking NominationScheduledRequests (r:1 w:1)
	fn cancel_nominator_unbond() -> Weight {
		(38_392_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: ParachainStaking Era (r:1 w:1)
	// Storage: ParachainStaking Points (r:1 w:0)
	// Storage: ParachainStaking Staked (r:1 w:2)
	// Storage: System Account (r:302 w:302)
	// Storage: ParachainStaking LockedEraPayout (r:1 w:1)
	// Storage: ParachainStaking AwardedPts (r:9 w:1)
	// Storage: ParachainStaking GrowthPeriod (r:1 w:0)
	// Storage: ParachainStaking Growth (r:1 w:1)
	// Storage: ParachainStaking CandidatePool (r:1 w:0)
	// Storage: ParachainStaking TotalSelected (r:1 w:0)
	// Storage: ParachainStaking MinCollatorStake (r:1 w:0)
	// Storage: ParachainStaking CandidateInfo (r:10 w:0)
	// Storage: ParachainStaking NominationScheduledRequests (r:10 w:0)
	// Storage: ParachainStaking TopNominations (r:10 w:0)
	// Storage: ParachainStaking Total (r:1 w:0)
	// Storage: ParachainStaking AtStake (r:1 w:11)
	// Storage: ParachainStaking SelectedCandidates (r:0 w:1)
	// Storage: ParachainStaking DelayedPayouts (r:0 w:1)
	/// The range of component `x` is `[8, 20]`.
	/// The range of component `y` is `[0, 30000]`.
	fn era_transition_on_initialize(x: u32, y: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 32_963_000
			.saturating_add((256_224_000 as Weight).saturating_mul(x as Weight))
			// Standard Error: 9_000
			.saturating_add((199_000 as Weight).saturating_mul(y as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((11 as Weight).saturating_mul(x as Weight)))
			.saturating_add(RocksDbWeight::get().writes((8 as Weight).saturating_mul(x as Weight)))
	}
	// Storage: ParachainStaking DelayedPayouts (r:1 w:0)
	// Storage: ParachainStaking Points (r:1 w:0)
	// Storage: ParachainStaking AwardedPts (r:2 w:1)
	// Storage: ParachainStaking AtStake (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: ParachainStaking LockedEraPayout (r:1 w:1)
	/// The range of component `y` is `[0, 300]`.
	fn pay_one_collator_reward(y: u32, ) -> Weight {
		(110_819_000 as Weight)
			// Standard Error: 43_000
			.saturating_add((23_316_000 as Weight).saturating_mul(y as Weight))
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(y as Weight)))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(y as Weight)))
	}
	// Storage: ParachainStaking Era (r:1 w:0)
	fn base_on_initialize() -> Weight {
		(4_617_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	// Storage: ParachainStaking CandidatePool (r:1 w:0)
	// Storage: ParachainStaking TotalSelected (r:1 w:0)
	// Storage: ParachainStaking MinCollatorStake (r:1 w:0)
	// Storage: ParachainStaking CandidateInfo (r:20 w:0)
	// Storage: ParachainStaking NominationScheduledRequests (r:20 w:0)
	// Storage: ParachainStaking TopNominations (r:20 w:0)
	// Storage: ParachainStaking SelectedCandidates (r:0 w:1)
	// Storage: ParachainStaking AtStake (r:0 w:20)
	fn select_top_candidates() -> Weight {
		(449_526_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(63 as Weight))
			.saturating_add(RocksDbWeight::get().writes(21 as Weight))
	}
	// Storage: ParachainStaking Era (r:1 w:0)
	// Storage: ParachainStaking AwardedPts (r:1 w:1)
	// Storage: ParachainStaking Points (r:1 w:1)
	fn note_author() -> Weight {
		(13_775_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: ParachainStaking Delay (r:0 w:1)
	fn set_admin_setting() -> Weight {
		(17_873_000 as Weight)
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
}